// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  publicId          String   @unique @default(nanoid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  publicId              String                 @unique @default(nanoid())
  name                  String?
  firstName             String
  lastName              String
  password              String?
  image                 String?
  role                  String                 @default("USER")
  accounts              Account[]
  emailVerified         DateTime?
  isTwoFactorEnabled    Boolean                @default(true)
  twoFactorConfirmation TwoFactorConfirmation?
  subscriptions         Subscription[]
  tables                Table[]
  publicViews           PublicTableView[]
  privateViews          PrivateTableView[]
  sessions              Session[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model PasswordResetToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Table {
  id           Int                @id @default(autoincrement())
  name         String
  publicId     String             @unique @default(nanoid())
  isPublic     Boolean            @default(false)
  userId       Int
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  days         Day[]
  libraryId    Int?
  library      Library?           @relation(fields: [libraryId], references: [id])
  publicViews  PublicTableView[]
  privateViews PrivateTableView[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@index([isPublic])
  @@index([userId])
}

model Day {
  id       Int       @id @default(autoincrement())
  name     DayName
  tableId  Int
  table    Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  subjects Subject[]

  @@index([tableId])
}

enum DayName {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Subject {
  id         Int      @id @default(autoincrement())
  publicId   String   @unique @default(nanoid())
  name       String
  teacher    String?
  startTime  String
  endTime    String
  dayId      Int
  day        Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)
  absence    Int      @default(0)
  attendance Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([dayId])
}

model Library {
  id       Int     @id @default(autoincrement())
  publicId String  @unique @default(nanoid())
  name     String
  tableId  Int
  tables   Table[]
}

model PublicTableView {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: SetDefault)
  tableId Int
  table   Table @relation(fields: [tableId], references: [id], onDelete: SetDefault)

  @@index([userId, tableId])
}

model PrivateTableView {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tableId Int
  table   Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([userId, tableId])
}

model Subscription {
  id                 Int                @id @default(autoincrement())
  price              Float
  publicId           String             @unique @default(nanoid())
  subscriptionPeriod SubscriptionPeriod
  subscribedAt       DateTime
  expiresAt          DateTime
  userId             Int                @unique
  subscribedTo       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionStatus SubscriptionStatus
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([userId], type: BTree)
}

enum SubscriptionPeriod {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  ONE_YEAR
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
}
