// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                BigInt  @id @default(autoincrement())
  userId            BigInt
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    BigInt                 @id @default(autoincrement())
  email                 String                 @unique
  name                  String
  password              String
  image                 String?
  accounts              Account[]
  emailVerified         DateTime?
  isTwoFactorEnabled    Boolean                @default(true)
  twoFactorConfirmation TwoFactorConfirmation?
  subscriptions         Subscription[]
  tables                Table[]
  publicViews           PublicTableView[]
  privateViews          PrivateTableView[]
}

model VerificationToken {
  id      BigInt   @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      BigInt   @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     BigInt @id @default(autoincrement())
  userId BigInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model PasswordResetToken {
  id      BigInt   @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Table {
  id           BigInt             @id @default(autoincrement())
  name         String
  isPublic     Boolean            @default(false)
  userId       BigInt
  user         User               @relation(fields: [userId], references: [id])
  subjects     Subject[]
  libraryId    Int?
  library      Library?           @relation(fields: [libraryId], references: [id])
  publicViews  PublicTableView[]
  privateViews PrivateTableView[]

  @@index([isPublic])
  @@index([userId])
}

model Subject {
  id       Int    @id @default(autoincrement())
  name     String
  tableId  BigInt
  table    Table  @relation(fields: [tableId], references: [id])
  absences Int    @default(4)

  @@index([tableId])
}

model Library {
  id      Int     @id @default(autoincrement())
  name    String
  tableId Int
  tables  Table[]
}

model PublicTableView {
  id      BigInt @id @default(autoincrement())
  userId  BigInt
  user    User   @relation(fields: [userId], references: [id], onDelete: SetDefault)
  tableId BigInt
  table   Table  @relation(fields: [tableId], references: [id], onDelete: SetDefault)

  @@index([userId, tableId])
}

model PrivateTableView {
  id      BigInt @id @default(autoincrement())
  userId  BigInt
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tableId BigInt
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([userId, tableId])
}

model Subscription {
  id                 BigInt             @id @default(autoincrement())
  price              Float
  subscriptionPeriod SubscriptionPeriod
  subscribedAt       DateTime
  expiresAt          DateTime
  userId             BigInt             @unique
  subscribedTo       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionStatus SubscriptionStatus
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@index([userId], type: BTree)
}

enum SubscriptionPeriod {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  ONE_YEAR
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
}
